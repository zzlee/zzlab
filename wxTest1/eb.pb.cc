// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eb {

namespace {

const ::google::protobuf::Descriptor* Size2i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Size2i_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point2i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2i_reflection_ = NULL;
const ::google::protobuf::Descriptor* Size2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Size2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rect2i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect2i_reflection_ = NULL;
const ::google::protobuf::Descriptor* Colour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Colour_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditorSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditorSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* LatticeSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatticeSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* EdgeBlendSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdgeBlendSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* Workspace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Workspace_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EditMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DisplayMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SelectMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ControlPointType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_eb_2eproto() {
  protobuf_AddDesc_eb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "eb.proto");
  GOOGLE_CHECK(file != NULL);
  Size2i_descriptor_ = file->message_type(0);
  static const int Size2i_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2i, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2i, height_),
  };
  Size2i_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Size2i_descriptor_,
      Size2i::default_instance_,
      Size2i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2i, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2i, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Size2i));
  Point2i_descriptor_ = file->message_type(1);
  static const int Point2i_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2i, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2i, y_),
  };
  Point2i_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point2i_descriptor_,
      Point2i::default_instance_,
      Point2i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2i, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2i, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point2i));
  Size2f_descriptor_ = file->message_type(2);
  static const int Size2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2f, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2f, height_),
  };
  Size2f_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Size2f_descriptor_,
      Size2f::default_instance_,
      Size2f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2f, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2f, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Size2f));
  Rect2i_descriptor_ = file->message_type(3);
  static const int Rect2i_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, bottom_),
  };
  Rect2i_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rect2i_descriptor_,
      Rect2i::default_instance_,
      Rect2i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect2i, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rect2i));
  Colour_descriptor_ = file->message_type(4);
  static const int Colour_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colour, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colour, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colour, b_),
  };
  Colour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Colour_descriptor_,
      Colour::default_instance_,
      Colour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Colour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Colour));
  EditorSettings_descriptor_ = file->message_type(5);
  static const int EditorSettings_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, display_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, edit_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, line_colour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, background_colour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, adjust_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, show_control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, grid_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, select_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, selected_),
  };
  EditorSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditorSettings_descriptor_,
      EditorSettings::default_instance_,
      EditorSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditorSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditorSettings));
  ControlPoint_descriptor_ = file->message_type(6);
  static const int ControlPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoint, y_),
  };
  ControlPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlPoint_descriptor_,
      ControlPoint::default_instance_,
      ControlPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlPoint));
  LatticeSettings_descriptor_ = file->message_type(7);
  static const int LatticeSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeSettings, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeSettings, subdiv_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeSettings, control_points_),
  };
  LatticeSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LatticeSettings_descriptor_,
      LatticeSettings::default_instance_,
      LatticeSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LatticeSettings));
  EdgeBlendSettings_descriptor_ = file->message_type(8);
  static const int EdgeBlendSettings_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBlendSettings, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBlendSettings, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBlendSettings, blending_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBlendSettings, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBlendSettings, center_),
  };
  EdgeBlendSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdgeBlendSettings_descriptor_,
      EdgeBlendSettings::default_instance_,
      EdgeBlendSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBlendSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBlendSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdgeBlendSettings));
  Workspace_descriptor_ = file->message_type(9);
  static const int Workspace_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workspace, editor_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workspace, lattice_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workspace, left_edge_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workspace, top_edge_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workspace, right_edge_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workspace, bottom_edge_settings_),
  };
  Workspace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Workspace_descriptor_,
      Workspace::default_instance_,
      Workspace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workspace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workspace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Workspace));
  EditMode_descriptor_ = file->enum_type(0);
  DisplayMode_descriptor_ = file->enum_type(1);
  SelectMode_descriptor_ = file->enum_type(2);
  ControlPointType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_eb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Size2i_descriptor_, &Size2i::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point2i_descriptor_, &Point2i::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Size2f_descriptor_, &Size2f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rect2i_descriptor_, &Rect2i::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Colour_descriptor_, &Colour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditorSettings_descriptor_, &EditorSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlPoint_descriptor_, &ControlPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LatticeSettings_descriptor_, &LatticeSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdgeBlendSettings_descriptor_, &EdgeBlendSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Workspace_descriptor_, &Workspace::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_eb_2eproto() {
  delete Size2i::default_instance_;
  delete Size2i_reflection_;
  delete Point2i::default_instance_;
  delete Point2i_reflection_;
  delete Size2f::default_instance_;
  delete Size2f_reflection_;
  delete Rect2i::default_instance_;
  delete Rect2i_reflection_;
  delete Colour::default_instance_;
  delete Colour_reflection_;
  delete EditorSettings::default_instance_;
  delete EditorSettings_reflection_;
  delete ControlPoint::default_instance_;
  delete ControlPoint_reflection_;
  delete LatticeSettings::default_instance_;
  delete LatticeSettings_reflection_;
  delete EdgeBlendSettings::default_instance_;
  delete EdgeBlendSettings_reflection_;
  delete Workspace::default_instance_;
  delete Workspace_reflection_;
}

void protobuf_AddDesc_eb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010eb.proto\022\002eb\"\'\n\006Size2i\022\r\n\005width\030\001 \002(\r\022"
    "\016\n\006height\030\002 \002(\r\"\037\n\007Point2i\022\t\n\001x\030\001 \002(\005\022\t\n"
    "\001y\030\002 \002(\005\"\'\n\006Size2f\022\r\n\005width\030\001 \002(\002\022\016\n\006hei"
    "ght\030\002 \002(\002\"B\n\006Rect2i\022\014\n\004left\030\001 \002(\005\022\013\n\003top"
    "\030\002 \002(\005\022\r\n\005right\030\003 \002(\005\022\016\n\006bottom\030\004 \002(\005\")\n"
    "\006Colour\022\t\n\001r\030\001 \002(\002\022\t\n\001g\030\002 \002(\002\022\t\n\001b\030\003 \002(\002"
    "\"\265\002\n\016EditorSettings\022%\n\014display_mode\030\014 \002("
    "\0162\017.eb.DisplayMode\022\037\n\tedit_mode\030\001 \002(\0162\014."
    "eb.EditMode\022\037\n\013line_colour\030\004 \002(\0132\n.eb.Co"
    "lour\022%\n\021background_colour\030\005 \002(\0132\n.eb.Col"
    "our\022\024\n\014adjust_speed\030\007 \002(\002\022\032\n\022show_contro"
    "l_point\030\010 \002(\010\022\035\n\tgrid_size\030\t \002(\0132\n.eb.Si"
    "ze2i\022#\n\013select_mode\030\n \002(\0162\016.eb.SelectMod"
    "e\022\035\n\010selected\030\013 \002(\0132\013.eb.Point2i\"H\n\014Cont"
    "rolPoint\022\"\n\004type\030\001 \002(\0162\024.eb.ControlPoint"
    "Type\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\"k\n\017LatticeSet"
    "tings\022\030\n\004size\030\001 \002(\0132\n.eb.Size2i\022\024\n\014subdi"
    "v_level\030\002 \002(\r\022(\n\016control_points\030\003 \003(\0132\020."
    "eb.ControlPoint\"c\n\021EdgeBlendSettings\022\016\n\006"
    "enable\030\001 \002(\010\022\r\n\005width\030\002 \002(\r\022\020\n\010blending\030"
    "\003 \002(\002\022\r\n\005gamma\030\004 \002(\002\022\016\n\006center\030\005 \002(\002\"\265\002\n"
    "\tWorkspace\022+\n\017editor_settings\030\001 \002(\0132\022.eb"
    ".EditorSettings\022-\n\020lattice_settings\030\002 \002("
    "\0132\023.eb.LatticeSettings\0221\n\022left_edge_sett"
    "ings\030\003 \002(\0132\025.eb.EdgeBlendSettings\0220\n\021top"
    "_edge_settings\030\004 \002(\0132\025.eb.EdgeBlendSetti"
    "ngs\0222\n\023right_edge_settings\030\005 \002(\0132\025.eb.Ed"
    "geBlendSettings\0223\n\024bottom_edge_settings\030"
    "\006 \002(\0132\025.eb.EdgeBlendSettings*n\n\010EditMode"
    "\022\013\n\007EM_FREE\020\000\022\025\n\021EM_CORNER_AVERAGE\020\001\022\022\n\016"
    "EM_ROW_AVERAGE\020\002\022\025\n\021EM_COLUMN_AVERAGE\020\003\022"
    "\023\n\017EM_EDGE_AVERAGE\020\004*3\n\013DisplayMode\022\020\n\014D"
    "M_MESH_GRID\020\000\022\022\n\016DM_PURE_COLOUR\020\001*D\n\nSel"
    "ectMode\022\r\n\tSM_SINGLE\020\000\022\n\n\006SM_ROW\020\001\022\r\n\tSM"
    "_COLUMN\020\002\022\014\n\010SM_CROSS\020\003*-\n\020ControlPointT"
    "ype\022\013\n\007CP_FREE\020\000\022\014\n\010CP_CEASE\020\001", 1430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eb.proto", &protobuf_RegisterTypes);
  Size2i::default_instance_ = new Size2i();
  Point2i::default_instance_ = new Point2i();
  Size2f::default_instance_ = new Size2f();
  Rect2i::default_instance_ = new Rect2i();
  Colour::default_instance_ = new Colour();
  EditorSettings::default_instance_ = new EditorSettings();
  ControlPoint::default_instance_ = new ControlPoint();
  LatticeSettings::default_instance_ = new LatticeSettings();
  EdgeBlendSettings::default_instance_ = new EdgeBlendSettings();
  Workspace::default_instance_ = new Workspace();
  Size2i::default_instance_->InitAsDefaultInstance();
  Point2i::default_instance_->InitAsDefaultInstance();
  Size2f::default_instance_->InitAsDefaultInstance();
  Rect2i::default_instance_->InitAsDefaultInstance();
  Colour::default_instance_->InitAsDefaultInstance();
  EditorSettings::default_instance_->InitAsDefaultInstance();
  ControlPoint::default_instance_->InitAsDefaultInstance();
  LatticeSettings::default_instance_->InitAsDefaultInstance();
  EdgeBlendSettings::default_instance_->InitAsDefaultInstance();
  Workspace::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_eb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_eb_2eproto {
  StaticDescriptorInitializer_eb_2eproto() {
    protobuf_AddDesc_eb_2eproto();
  }
} static_descriptor_initializer_eb_2eproto_;
const ::google::protobuf::EnumDescriptor* EditMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditMode_descriptor_;
}
bool EditMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DisplayMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisplayMode_descriptor_;
}
bool DisplayMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SelectMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectMode_descriptor_;
}
bool SelectMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlPointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlPointType_descriptor_;
}
bool ControlPointType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Size2i::kWidthFieldNumber;
const int Size2i::kHeightFieldNumber;
#endif  // !_MSC_VER

Size2i::Size2i()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Size2i::InitAsDefaultInstance() {
}

Size2i::Size2i(const Size2i& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Size2i::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Size2i::~Size2i() {
  SharedDtor();
}

void Size2i::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Size2i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Size2i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Size2i_descriptor_;
}

const Size2i& Size2i::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

Size2i* Size2i::default_instance_ = NULL;

Size2i* Size2i::New() const {
  return new Size2i;
}

void Size2i::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0u;
    height_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Size2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Size2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Size2i::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Size2i::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size2i::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Size2i* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Size2i*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Size2i::MergeFrom(const Size2i& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Size2i::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size2i::CopyFrom(const Size2i& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size2i::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Size2i::Swap(Size2i* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Size2i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Size2i_descriptor_;
  metadata.reflection = Size2i_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point2i::kXFieldNumber;
const int Point2i::kYFieldNumber;
#endif  // !_MSC_VER

Point2i::Point2i()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point2i::InitAsDefaultInstance() {
}

Point2i::Point2i(const Point2i& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point2i::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point2i::~Point2i() {
  SharedDtor();
}

void Point2i::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point2i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2i_descriptor_;
}

const Point2i& Point2i::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

Point2i* Point2i::default_instance_ = NULL;

Point2i* Point2i::New() const {
  return new Point2i;
}

void Point2i::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point2i::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point2i::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2i::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point2i* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point2i*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point2i::MergeFrom(const Point2i& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point2i::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2i::CopyFrom(const Point2i& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2i::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point2i::Swap(Point2i* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point2i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2i_descriptor_;
  metadata.reflection = Point2i_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Size2f::kWidthFieldNumber;
const int Size2f::kHeightFieldNumber;
#endif  // !_MSC_VER

Size2f::Size2f()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Size2f::InitAsDefaultInstance() {
}

Size2f::Size2f(const Size2f& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Size2f::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Size2f::~Size2f() {
  SharedDtor();
}

void Size2f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Size2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Size2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Size2f_descriptor_;
}

const Size2f& Size2f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

Size2f* Size2f::default_instance_ = NULL;

Size2f* Size2f::New() const {
  return new Size2f;
}

void Size2f::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Size2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // required float height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Size2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // required float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Size2f::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // required float height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Size2f::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // required float height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size2f::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Size2f* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Size2f*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Size2f::MergeFrom(const Size2f& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Size2f::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size2f::CopyFrom(const Size2f& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size2f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Size2f::Swap(Size2f* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Size2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Size2f_descriptor_;
  metadata.reflection = Size2f_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rect2i::kLeftFieldNumber;
const int Rect2i::kTopFieldNumber;
const int Rect2i::kRightFieldNumber;
const int Rect2i::kBottomFieldNumber;
#endif  // !_MSC_VER

Rect2i::Rect2i()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rect2i::InitAsDefaultInstance() {
}

Rect2i::Rect2i(const Rect2i& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rect2i::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  top_ = 0;
  right_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rect2i::~Rect2i() {
  SharedDtor();
}

void Rect2i::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rect2i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect2i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect2i_descriptor_;
}

const Rect2i& Rect2i::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

Rect2i* Rect2i::default_instance_ = NULL;

Rect2i* Rect2i::New() const {
  return new Rect2i;
}

void Rect2i::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    top_ = 0;
    right_ = 0;
    bottom_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rect2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top;
        break;
      }

      // required int32 top = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_right;
        break;
      }

      // required int32 right = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }

      // required int32 bottom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rect2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // required int32 top = 2;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  // required int32 right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // required int32 bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rect2i::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // required int32 top = 2;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top(), target);
  }

  // required int32 right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right(), target);
  }

  // required int32 bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bottom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rect2i::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // required int32 top = 2;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // required int32 right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // required int32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect2i::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rect2i* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rect2i*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rect2i::MergeFrom(const Rect2i& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rect2i::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect2i::CopyFrom(const Rect2i& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect2i::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Rect2i::Swap(Rect2i* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(top_, other->top_);
    std::swap(right_, other->right_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rect2i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect2i_descriptor_;
  metadata.reflection = Rect2i_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Colour::kRFieldNumber;
const int Colour::kGFieldNumber;
const int Colour::kBFieldNumber;
#endif  // !_MSC_VER

Colour::Colour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Colour::InitAsDefaultInstance() {
}

Colour::Colour(const Colour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Colour::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Colour::~Colour() {
  SharedDtor();
}

void Colour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Colour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Colour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Colour_descriptor_;
}

const Colour& Colour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

Colour* Colour::default_instance_ = NULL;

Colour* Colour::New() const {
  return new Colour;
}

void Colour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
    g_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Colour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float r = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_g;
        break;
      }

      // required float g = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_b;
        break;
      }

      // required float b = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Colour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // required float g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // required float b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Colour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  // required float g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }

  // required float b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Colour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float r = 1;
    if (has_r()) {
      total_size += 1 + 4;
    }

    // required float g = 2;
    if (has_g()) {
      total_size += 1 + 4;
    }

    // required float b = 3;
    if (has_b()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Colour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Colour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Colour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Colour::MergeFrom(const Colour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Colour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Colour::CopyFrom(const Colour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Colour::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Colour::Swap(Colour* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Colour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Colour_descriptor_;
  metadata.reflection = Colour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditorSettings::kDisplayModeFieldNumber;
const int EditorSettings::kEditModeFieldNumber;
const int EditorSettings::kLineColourFieldNumber;
const int EditorSettings::kBackgroundColourFieldNumber;
const int EditorSettings::kAdjustSpeedFieldNumber;
const int EditorSettings::kShowControlPointFieldNumber;
const int EditorSettings::kGridSizeFieldNumber;
const int EditorSettings::kSelectModeFieldNumber;
const int EditorSettings::kSelectedFieldNumber;
#endif  // !_MSC_VER

EditorSettings::EditorSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditorSettings::InitAsDefaultInstance() {
  line_colour_ = const_cast< ::eb::Colour*>(&::eb::Colour::default_instance());
  background_colour_ = const_cast< ::eb::Colour*>(&::eb::Colour::default_instance());
  grid_size_ = const_cast< ::eb::Size2i*>(&::eb::Size2i::default_instance());
  selected_ = const_cast< ::eb::Point2i*>(&::eb::Point2i::default_instance());
}

EditorSettings::EditorSettings(const EditorSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditorSettings::SharedCtor() {
  _cached_size_ = 0;
  display_mode_ = 0;
  edit_mode_ = 0;
  line_colour_ = NULL;
  background_colour_ = NULL;
  adjust_speed_ = 0;
  show_control_point_ = false;
  grid_size_ = NULL;
  select_mode_ = 0;
  selected_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditorSettings::~EditorSettings() {
  SharedDtor();
}

void EditorSettings::SharedDtor() {
  if (this != default_instance_) {
    delete line_colour_;
    delete background_colour_;
    delete grid_size_;
    delete selected_;
  }
}

void EditorSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditorSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditorSettings_descriptor_;
}

const EditorSettings& EditorSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

EditorSettings* EditorSettings::default_instance_ = NULL;

EditorSettings* EditorSettings::New() const {
  return new EditorSettings;
}

void EditorSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    display_mode_ = 0;
    edit_mode_ = 0;
    if (has_line_colour()) {
      if (line_colour_ != NULL) line_colour_->::eb::Colour::Clear();
    }
    if (has_background_colour()) {
      if (background_colour_ != NULL) background_colour_->::eb::Colour::Clear();
    }
    adjust_speed_ = 0;
    show_control_point_ = false;
    if (has_grid_size()) {
      if (grid_size_ != NULL) grid_size_->::eb::Size2i::Clear();
    }
    select_mode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_selected()) {
      if (selected_ != NULL) selected_->::eb::Point2i::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditorSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .eb.EditMode edit_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eb::EditMode_IsValid(value)) {
            set_edit_mode(static_cast< ::eb::EditMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_line_colour;
        break;
      }

      // required .eb.Colour line_colour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_colour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line_colour()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_background_colour;
        break;
      }

      // required .eb.Colour background_colour = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background_colour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_background_colour()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_adjust_speed;
        break;
      }

      // required float adjust_speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_adjust_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &adjust_speed_)));
          set_has_adjust_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_show_control_point;
        break;
      }

      // required bool show_control_point = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_control_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_control_point_)));
          set_has_show_control_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_grid_size;
        break;
      }

      // required .eb.Size2i grid_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_select_mode;
        break;
      }

      // required .eb.SelectMode select_mode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_select_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eb::SelectMode_IsValid(value)) {
            set_select_mode(static_cast< ::eb::SelectMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_selected;
        break;
      }

      // required .eb.Point2i selected = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_display_mode;
        break;
      }

      // required .eb.DisplayMode display_mode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eb::DisplayMode_IsValid(value)) {
            set_display_mode(static_cast< ::eb::DisplayMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditorSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .eb.EditMode edit_mode = 1;
  if (has_edit_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->edit_mode(), output);
  }

  // required .eb.Colour line_colour = 4;
  if (has_line_colour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->line_colour(), output);
  }

  // required .eb.Colour background_colour = 5;
  if (has_background_colour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->background_colour(), output);
  }

  // required float adjust_speed = 7;
  if (has_adjust_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->adjust_speed(), output);
  }

  // required bool show_control_point = 8;
  if (has_show_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->show_control_point(), output);
  }

  // required .eb.Size2i grid_size = 9;
  if (has_grid_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->grid_size(), output);
  }

  // required .eb.SelectMode select_mode = 10;
  if (has_select_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->select_mode(), output);
  }

  // required .eb.Point2i selected = 11;
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->selected(), output);
  }

  // required .eb.DisplayMode display_mode = 12;
  if (has_display_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->display_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditorSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .eb.EditMode edit_mode = 1;
  if (has_edit_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->edit_mode(), target);
  }

  // required .eb.Colour line_colour = 4;
  if (has_line_colour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->line_colour(), target);
  }

  // required .eb.Colour background_colour = 5;
  if (has_background_colour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->background_colour(), target);
  }

  // required float adjust_speed = 7;
  if (has_adjust_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->adjust_speed(), target);
  }

  // required bool show_control_point = 8;
  if (has_show_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->show_control_point(), target);
  }

  // required .eb.Size2i grid_size = 9;
  if (has_grid_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->grid_size(), target);
  }

  // required .eb.SelectMode select_mode = 10;
  if (has_select_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->select_mode(), target);
  }

  // required .eb.Point2i selected = 11;
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->selected(), target);
  }

  // required .eb.DisplayMode display_mode = 12;
  if (has_display_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->display_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditorSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .eb.DisplayMode display_mode = 12;
    if (has_display_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_mode());
    }

    // required .eb.EditMode edit_mode = 1;
    if (has_edit_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->edit_mode());
    }

    // required .eb.Colour line_colour = 4;
    if (has_line_colour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line_colour());
    }

    // required .eb.Colour background_colour = 5;
    if (has_background_colour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->background_colour());
    }

    // required float adjust_speed = 7;
    if (has_adjust_speed()) {
      total_size += 1 + 4;
    }

    // required bool show_control_point = 8;
    if (has_show_control_point()) {
      total_size += 1 + 1;
    }

    // required .eb.Size2i grid_size = 9;
    if (has_grid_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grid_size());
    }

    // required .eb.SelectMode select_mode = 10;
    if (has_select_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->select_mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .eb.Point2i selected = 11;
    if (has_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selected());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditorSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditorSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditorSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditorSettings::MergeFrom(const EditorSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display_mode()) {
      set_display_mode(from.display_mode());
    }
    if (from.has_edit_mode()) {
      set_edit_mode(from.edit_mode());
    }
    if (from.has_line_colour()) {
      mutable_line_colour()->::eb::Colour::MergeFrom(from.line_colour());
    }
    if (from.has_background_colour()) {
      mutable_background_colour()->::eb::Colour::MergeFrom(from.background_colour());
    }
    if (from.has_adjust_speed()) {
      set_adjust_speed(from.adjust_speed());
    }
    if (from.has_show_control_point()) {
      set_show_control_point(from.show_control_point());
    }
    if (from.has_grid_size()) {
      mutable_grid_size()->::eb::Size2i::MergeFrom(from.grid_size());
    }
    if (from.has_select_mode()) {
      set_select_mode(from.select_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_selected()) {
      mutable_selected()->::eb::Point2i::MergeFrom(from.selected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditorSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditorSettings::CopyFrom(const EditorSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditorSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_line_colour()) {
    if (!this->line_colour().IsInitialized()) return false;
  }
  if (has_background_colour()) {
    if (!this->background_colour().IsInitialized()) return false;
  }
  if (has_grid_size()) {
    if (!this->grid_size().IsInitialized()) return false;
  }
  if (has_selected()) {
    if (!this->selected().IsInitialized()) return false;
  }
  return true;
}

void EditorSettings::Swap(EditorSettings* other) {
  if (other != this) {
    std::swap(display_mode_, other->display_mode_);
    std::swap(edit_mode_, other->edit_mode_);
    std::swap(line_colour_, other->line_colour_);
    std::swap(background_colour_, other->background_colour_);
    std::swap(adjust_speed_, other->adjust_speed_);
    std::swap(show_control_point_, other->show_control_point_);
    std::swap(grid_size_, other->grid_size_);
    std::swap(select_mode_, other->select_mode_);
    std::swap(selected_, other->selected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditorSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditorSettings_descriptor_;
  metadata.reflection = EditorSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ControlPoint::kTypeFieldNumber;
const int ControlPoint::kXFieldNumber;
const int ControlPoint::kYFieldNumber;
#endif  // !_MSC_VER

ControlPoint::ControlPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControlPoint::InitAsDefaultInstance() {
}

ControlPoint::ControlPoint(const ControlPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControlPoint::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlPoint::~ControlPoint() {
  SharedDtor();
}

void ControlPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlPoint_descriptor_;
}

const ControlPoint& ControlPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

ControlPoint* ControlPoint::default_instance_ = NULL;

ControlPoint* ControlPoint::New() const {
  return new ControlPoint;
}

void ControlPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .eb.ControlPointType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::eb::ControlPointType_IsValid(value)) {
            set_type(static_cast< ::eb::ControlPointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControlPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .eb.ControlPointType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControlPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .eb.ControlPointType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControlPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .eb.ControlPointType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlPoint::MergeFrom(const ControlPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlPoint::CopyFrom(const ControlPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ControlPoint::Swap(ControlPoint* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlPoint_descriptor_;
  metadata.reflection = ControlPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LatticeSettings::kSizeFieldNumber;
const int LatticeSettings::kSubdivLevelFieldNumber;
const int LatticeSettings::kControlPointsFieldNumber;
#endif  // !_MSC_VER

LatticeSettings::LatticeSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LatticeSettings::InitAsDefaultInstance() {
  size_ = const_cast< ::eb::Size2i*>(&::eb::Size2i::default_instance());
}

LatticeSettings::LatticeSettings(const LatticeSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LatticeSettings::SharedCtor() {
  _cached_size_ = 0;
  size_ = NULL;
  subdiv_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatticeSettings::~LatticeSettings() {
  SharedDtor();
}

void LatticeSettings::SharedDtor() {
  if (this != default_instance_) {
    delete size_;
  }
}

void LatticeSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatticeSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatticeSettings_descriptor_;
}

const LatticeSettings& LatticeSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

LatticeSettings* LatticeSettings::default_instance_ = NULL;

LatticeSettings* LatticeSettings::New() const {
  return new LatticeSettings;
}

void LatticeSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_size()) {
      if (size_ != NULL) size_->::eb::Size2i::Clear();
    }
    subdiv_level_ = 0u;
  }
  control_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LatticeSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .eb.Size2i size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subdiv_level;
        break;
      }

      // required uint32 subdiv_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subdiv_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subdiv_level_)));
          set_has_subdiv_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_control_points;
        break;
      }

      // repeated .eb.ControlPoint control_points = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_control_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_control_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LatticeSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .eb.Size2i size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->size(), output);
  }

  // required uint32 subdiv_level = 2;
  if (has_subdiv_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->subdiv_level(), output);
  }

  // repeated .eb.ControlPoint control_points = 3;
  for (int i = 0; i < this->control_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->control_points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LatticeSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .eb.Size2i size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->size(), target);
  }

  // required uint32 subdiv_level = 2;
  if (has_subdiv_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->subdiv_level(), target);
  }

  // repeated .eb.ControlPoint control_points = 3;
  for (int i = 0; i < this->control_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->control_points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LatticeSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .eb.Size2i size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required uint32 subdiv_level = 2;
    if (has_subdiv_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subdiv_level());
    }

  }
  // repeated .eb.ControlPoint control_points = 3;
  total_size += 1 * this->control_points_size();
  for (int i = 0; i < this->control_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->control_points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatticeSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LatticeSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LatticeSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LatticeSettings::MergeFrom(const LatticeSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  control_points_.MergeFrom(from.control_points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      mutable_size()->::eb::Size2i::MergeFrom(from.size());
    }
    if (from.has_subdiv_level()) {
      set_subdiv_level(from.subdiv_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LatticeSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeSettings::CopyFrom(const LatticeSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  for (int i = 0; i < control_points_size(); i++) {
    if (!this->control_points(i).IsInitialized()) return false;
  }
  return true;
}

void LatticeSettings::Swap(LatticeSettings* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(subdiv_level_, other->subdiv_level_);
    control_points_.Swap(&other->control_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LatticeSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatticeSettings_descriptor_;
  metadata.reflection = LatticeSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EdgeBlendSettings::kEnableFieldNumber;
const int EdgeBlendSettings::kWidthFieldNumber;
const int EdgeBlendSettings::kBlendingFieldNumber;
const int EdgeBlendSettings::kGammaFieldNumber;
const int EdgeBlendSettings::kCenterFieldNumber;
#endif  // !_MSC_VER

EdgeBlendSettings::EdgeBlendSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdgeBlendSettings::InitAsDefaultInstance() {
}

EdgeBlendSettings::EdgeBlendSettings(const EdgeBlendSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdgeBlendSettings::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  width_ = 0u;
  blending_ = 0;
  gamma_ = 0;
  center_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdgeBlendSettings::~EdgeBlendSettings() {
  SharedDtor();
}

void EdgeBlendSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EdgeBlendSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeBlendSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgeBlendSettings_descriptor_;
}

const EdgeBlendSettings& EdgeBlendSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

EdgeBlendSettings* EdgeBlendSettings::default_instance_ = NULL;

EdgeBlendSettings* EdgeBlendSettings::New() const {
  return new EdgeBlendSettings;
}

void EdgeBlendSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = false;
    width_ = 0u;
    blending_ = 0;
    gamma_ = 0;
    center_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdgeBlendSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // required uint32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_blending;
        break;
      }

      // required float blending = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_)));
          set_has_blending();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_gamma;
        break;
      }

      // required float gamma = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_center;
        break;
      }

      // required float center = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &center_)));
          set_has_center();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdgeBlendSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // required uint32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // required float blending = 3;
  if (has_blending()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->blending(), output);
  }

  // required float gamma = 4;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gamma(), output);
  }

  // required float center = 5;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->center(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdgeBlendSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // required uint32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // required float blending = 3;
  if (has_blending()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->blending(), target);
  }

  // required float gamma = 4;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gamma(), target);
  }

  // required float center = 5;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->center(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdgeBlendSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }

    // required uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required float blending = 3;
    if (has_blending()) {
      total_size += 1 + 4;
    }

    // required float gamma = 4;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // required float center = 5;
    if (has_center()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeBlendSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdgeBlendSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdgeBlendSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdgeBlendSettings::MergeFrom(const EdgeBlendSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_blending()) {
      set_blending(from.blending());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_center()) {
      set_center(from.center());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdgeBlendSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeBlendSettings::CopyFrom(const EdgeBlendSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeBlendSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void EdgeBlendSettings::Swap(EdgeBlendSettings* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(width_, other->width_);
    std::swap(blending_, other->blending_);
    std::swap(gamma_, other->gamma_);
    std::swap(center_, other->center_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdgeBlendSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdgeBlendSettings_descriptor_;
  metadata.reflection = EdgeBlendSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Workspace::kEditorSettingsFieldNumber;
const int Workspace::kLatticeSettingsFieldNumber;
const int Workspace::kLeftEdgeSettingsFieldNumber;
const int Workspace::kTopEdgeSettingsFieldNumber;
const int Workspace::kRightEdgeSettingsFieldNumber;
const int Workspace::kBottomEdgeSettingsFieldNumber;
#endif  // !_MSC_VER

Workspace::Workspace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Workspace::InitAsDefaultInstance() {
  editor_settings_ = const_cast< ::eb::EditorSettings*>(&::eb::EditorSettings::default_instance());
  lattice_settings_ = const_cast< ::eb::LatticeSettings*>(&::eb::LatticeSettings::default_instance());
  left_edge_settings_ = const_cast< ::eb::EdgeBlendSettings*>(&::eb::EdgeBlendSettings::default_instance());
  top_edge_settings_ = const_cast< ::eb::EdgeBlendSettings*>(&::eb::EdgeBlendSettings::default_instance());
  right_edge_settings_ = const_cast< ::eb::EdgeBlendSettings*>(&::eb::EdgeBlendSettings::default_instance());
  bottom_edge_settings_ = const_cast< ::eb::EdgeBlendSettings*>(&::eb::EdgeBlendSettings::default_instance());
}

Workspace::Workspace(const Workspace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Workspace::SharedCtor() {
  _cached_size_ = 0;
  editor_settings_ = NULL;
  lattice_settings_ = NULL;
  left_edge_settings_ = NULL;
  top_edge_settings_ = NULL;
  right_edge_settings_ = NULL;
  bottom_edge_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Workspace::~Workspace() {
  SharedDtor();
}

void Workspace::SharedDtor() {
  if (this != default_instance_) {
    delete editor_settings_;
    delete lattice_settings_;
    delete left_edge_settings_;
    delete top_edge_settings_;
    delete right_edge_settings_;
    delete bottom_edge_settings_;
  }
}

void Workspace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Workspace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Workspace_descriptor_;
}

const Workspace& Workspace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eb_2eproto();
  return *default_instance_;
}

Workspace* Workspace::default_instance_ = NULL;

Workspace* Workspace::New() const {
  return new Workspace;
}

void Workspace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_editor_settings()) {
      if (editor_settings_ != NULL) editor_settings_->::eb::EditorSettings::Clear();
    }
    if (has_lattice_settings()) {
      if (lattice_settings_ != NULL) lattice_settings_->::eb::LatticeSettings::Clear();
    }
    if (has_left_edge_settings()) {
      if (left_edge_settings_ != NULL) left_edge_settings_->::eb::EdgeBlendSettings::Clear();
    }
    if (has_top_edge_settings()) {
      if (top_edge_settings_ != NULL) top_edge_settings_->::eb::EdgeBlendSettings::Clear();
    }
    if (has_right_edge_settings()) {
      if (right_edge_settings_ != NULL) right_edge_settings_->::eb::EdgeBlendSettings::Clear();
    }
    if (has_bottom_edge_settings()) {
      if (bottom_edge_settings_ != NULL) bottom_edge_settings_->::eb::EdgeBlendSettings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Workspace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .eb.EditorSettings editor_settings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editor_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lattice_settings;
        break;
      }

      // required .eb.LatticeSettings lattice_settings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lattice_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lattice_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_left_edge_settings;
        break;
      }

      // required .eb.EdgeBlendSettings left_edge_settings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_edge_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_edge_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_top_edge_settings;
        break;
      }

      // required .eb.EdgeBlendSettings top_edge_settings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top_edge_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_edge_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_right_edge_settings;
        break;
      }

      // required .eb.EdgeBlendSettings right_edge_settings = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_edge_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_edge_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bottom_edge_settings;
        break;
      }

      // required .eb.EdgeBlendSettings bottom_edge_settings = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bottom_edge_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_edge_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Workspace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .eb.EditorSettings editor_settings = 1;
  if (has_editor_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->editor_settings(), output);
  }

  // required .eb.LatticeSettings lattice_settings = 2;
  if (has_lattice_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lattice_settings(), output);
  }

  // required .eb.EdgeBlendSettings left_edge_settings = 3;
  if (has_left_edge_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->left_edge_settings(), output);
  }

  // required .eb.EdgeBlendSettings top_edge_settings = 4;
  if (has_top_edge_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->top_edge_settings(), output);
  }

  // required .eb.EdgeBlendSettings right_edge_settings = 5;
  if (has_right_edge_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->right_edge_settings(), output);
  }

  // required .eb.EdgeBlendSettings bottom_edge_settings = 6;
  if (has_bottom_edge_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bottom_edge_settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Workspace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .eb.EditorSettings editor_settings = 1;
  if (has_editor_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->editor_settings(), target);
  }

  // required .eb.LatticeSettings lattice_settings = 2;
  if (has_lattice_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lattice_settings(), target);
  }

  // required .eb.EdgeBlendSettings left_edge_settings = 3;
  if (has_left_edge_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->left_edge_settings(), target);
  }

  // required .eb.EdgeBlendSettings top_edge_settings = 4;
  if (has_top_edge_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->top_edge_settings(), target);
  }

  // required .eb.EdgeBlendSettings right_edge_settings = 5;
  if (has_right_edge_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->right_edge_settings(), target);
  }

  // required .eb.EdgeBlendSettings bottom_edge_settings = 6;
  if (has_bottom_edge_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bottom_edge_settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Workspace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .eb.EditorSettings editor_settings = 1;
    if (has_editor_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editor_settings());
    }

    // required .eb.LatticeSettings lattice_settings = 2;
    if (has_lattice_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lattice_settings());
    }

    // required .eb.EdgeBlendSettings left_edge_settings = 3;
    if (has_left_edge_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_edge_settings());
    }

    // required .eb.EdgeBlendSettings top_edge_settings = 4;
    if (has_top_edge_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_edge_settings());
    }

    // required .eb.EdgeBlendSettings right_edge_settings = 5;
    if (has_right_edge_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_edge_settings());
    }

    // required .eb.EdgeBlendSettings bottom_edge_settings = 6;
    if (has_bottom_edge_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_edge_settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Workspace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Workspace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Workspace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Workspace::MergeFrom(const Workspace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_editor_settings()) {
      mutable_editor_settings()->::eb::EditorSettings::MergeFrom(from.editor_settings());
    }
    if (from.has_lattice_settings()) {
      mutable_lattice_settings()->::eb::LatticeSettings::MergeFrom(from.lattice_settings());
    }
    if (from.has_left_edge_settings()) {
      mutable_left_edge_settings()->::eb::EdgeBlendSettings::MergeFrom(from.left_edge_settings());
    }
    if (from.has_top_edge_settings()) {
      mutable_top_edge_settings()->::eb::EdgeBlendSettings::MergeFrom(from.top_edge_settings());
    }
    if (from.has_right_edge_settings()) {
      mutable_right_edge_settings()->::eb::EdgeBlendSettings::MergeFrom(from.right_edge_settings());
    }
    if (from.has_bottom_edge_settings()) {
      mutable_bottom_edge_settings()->::eb::EdgeBlendSettings::MergeFrom(from.bottom_edge_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Workspace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workspace::CopyFrom(const Workspace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workspace::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_editor_settings()) {
    if (!this->editor_settings().IsInitialized()) return false;
  }
  if (has_lattice_settings()) {
    if (!this->lattice_settings().IsInitialized()) return false;
  }
  if (has_left_edge_settings()) {
    if (!this->left_edge_settings().IsInitialized()) return false;
  }
  if (has_top_edge_settings()) {
    if (!this->top_edge_settings().IsInitialized()) return false;
  }
  if (has_right_edge_settings()) {
    if (!this->right_edge_settings().IsInitialized()) return false;
  }
  if (has_bottom_edge_settings()) {
    if (!this->bottom_edge_settings().IsInitialized()) return false;
  }
  return true;
}

void Workspace::Swap(Workspace* other) {
  if (other != this) {
    std::swap(editor_settings_, other->editor_settings_);
    std::swap(lattice_settings_, other->lattice_settings_);
    std::swap(left_edge_settings_, other->left_edge_settings_);
    std::swap(top_edge_settings_, other->top_edge_settings_);
    std::swap(right_edge_settings_, other->right_edge_settings_);
    std::swap(bottom_edge_settings_, other->bottom_edge_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Workspace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Workspace_descriptor_;
  metadata.reflection = Workspace_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eb

// @@protoc_insertion_point(global_scope)
